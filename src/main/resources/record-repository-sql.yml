insertRecord: >
  INSERT INTO ${table}
    (expedition_id, local_identifier, data)
  VALUES
    (:expeditionId, :identifier, to_jsonb(:data::jsonb))
  ON CONFLICT (local_identifier, expedition_id)
    DO UPDATE SET data = to_jsonb(:data::jsonb)

insertChildRecord: >
  INSERT INTO ${table}
    (expedition_id, local_identifier, parent_identifier, data)
  VALUES
    (:expeditionId, :identifier, :parent_identifier, to_jsonb(:data::jsonb))
  ON CONFLICT (local_identifier, expedition_id)
    DO UPDATE SET data = to_jsonb(:data::jsonb)

selectRecords: >
  SELECT r.data as data
  FROM ${table} AS r
    INNER JOIN expeditions e on r.expediton_id = e.expeditionid
  WHERE e.expeditionCode = :expeditionCode AND e.projectId = :projectId

# sql for creating entity tables
createEntityTable: >
  CREATE TABLE ${table}
    (
      id SERIAL PRIMARY KEY,
      local_identifier TEXT NOT NULL,
      expedition_id INT NOT NULL REFERENCES expeditions (expeditionId) ON DELETE CASCADE,
      data JSONB NOT NULL,
      tsv TSVECTOR,
      created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
      modified TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
      UNIQUE (local_identifier, expedition_id)
    );

  CREATE TRIGGER tsvector_update BEFORE INSERT OR UPDATE ON ${table} FOR EACH ROW EXECUTE PROCEDURE entity_tsv_trigger();
  CREATE TRIGGER update_modtime BEFORE UPDATE ON ${table} FOR EACH ROW EXECUTE PROCEDURE update_modified_column();
  CREATE TRIGGER set_createdtime BEFORE INSERT ON ${table} FOR EACH ROW EXECUTE PROCEDURE set_created_column();
  CREATE TRIGGER entity_audit AFTER INSERT OR DELETE OR UPDATE ON ${table} FOR EACH ROW EXECUTE PROCEDURE entity_history();

  CREATE INDEX idx_project_${projectId}_${conceptAlias}_data ON ${table} USING GIN (data);
  CREATE INDEX idx_project_${projectId}_${conceptAlias}_tsv ON ${table} USING GIN (tsv);

createChildEntityTableForeignKey: >
  ALTER TABLE ${table}
      ADD COLUMN parent_identifier NOT NULL;
  ALTER TABLE ${table}
      ADD CONSTRAINT project_${projectId}_${conceptAlias} _parent_fkey
      FOREIGN KEY (parent_identifier, expedition_id)
      REFERENCES ${parentTable} (local_identifier, expedition_id);

# sql to execute when creating a new project
createProjectSchema: >
  CREATE SCHEMA project_${projectId};

  CREATE TABLE project_${projectId}.audit_table
  (
    event_id bigserial primary key,
    table_name text not null, -- table the change was made to
    user_name text, -- user who made the change
    ts TIMESTAMP WITH TIME ZONE NOT NULL, -- timestamp the change happened
    action TEXT NOT NULL CHECK (action IN ('I','D','U', 'T')), -- INSERT, DELETE, UPDATE, or TRUNCATE
    row_data jsonb, -- For INSERT this is the new row values. For DELETE and UPDATE it is the old row values.
    changed_fields jsonb -- Null except UPDATE events. This is the result of jsonb_diff_val(NEW data, OLD data)
  );